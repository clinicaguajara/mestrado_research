import streamlit as st
from modules.componentes import render_questionario_neurociencia
from modules.itens_neurociencia import SOCIODEMOGRAFICO, LPFS_BF, LSM, PID_5_BF, AQ_50
from modules.metadados import metadados_blocos
from services.correcao_escala import corrigir_aq50_estatistico
from services.export import preparar_resultado_exportacao_estatistico
import pandas as pd

# Config da p√°gina
st.set_page_config(page_title="Question√°rio Neuroci√™ncia", layout="centered")

# Define os blocos do question√°rio
BLOCOS = {
    "1. Sociodemogr√°fico": SOCIODEMOGRAFICO,
    "2. LPFS-BF": LPFS_BF,
    "3. LSM-21": LSM,
    "4. PID-5-BF": PID_5_BF,
    "5. AQ-50": AQ_50,
}

# Inicializa o estado
if "respostas_enviadas" not in st.session_state:
    st.session_state["respostas_enviadas"] = False
if "respostas" not in st.session_state:
    st.session_state["respostas"] = {}

# Renderiza o formul√°rio apenas se ainda n√£o foi enviado
if not st.session_state["respostas_enviadas"]:
    payload = render_questionario_neurociencia(BLOCOS, metadados_blocos)
    if payload:
        st.session_state["respostas_enviadas"] = True
        st.session_state["respostas"] = payload["respostas"]

# Se o formul√°rio foi enviado, mostra a an√°lise
if st.session_state["respostas_enviadas"]:
    st.success("‚úÖ Respostas recebidas com sucesso.")

    grupo = st.selectbox(
        "Selecione o grupo normativo de refer√™ncia para corre√ß√£o:",
        [
            "controle_masculino",
            "controle_feminino",
            "autista_masculino",
            "autista_feminino"
        ],
        key="grupo_normativo"
    )

    # Corrige com base no grupo escolhido
    resultado = corrigir_aq50_estatistico(st.session_state["respostas"], grupo=grupo)
    exportavel = preparar_resultado_exportacao_estatistico(resultado)

    # Mostra em tabela
    st.subheader("üìä Corre√ß√£o autom√°tica do AQ-50 (grupo: " + grupo.replace("_", " ").title() + ")")
    # Mapeamento para renomear os fatores
    nomes_legiveis = {
        "habilidades_sociais": "Habilidades sociais",
        "atencao_alternada": "Aten√ß√£o alternada",
        "atencao_a_detalhes": "Aten√ß√£o a detalhes",
        "comunicacao": "Comunica√ß√£o",
        "imaginacao": "Imagina√ß√£o literal",
        "total": "Escore total",
    }

    # Aplica o mapeamento
    df = pd.DataFrame(resultado).T[["escore", "percentil_estimado"]]
    df.index = df.index.map(nomes_legiveis.get)
    st.dataframe(df, use_container_width=True)

    # Bot√µes de download
    json_bytes = pd.Series(exportavel).to_json(indent=2).encode("utf-8")
    st.download_button("üì• Baixar resultado (JSON)", json_bytes, file_name="resultado_aq50.json", use_container_width=True)

    csv_bytes = pd.DataFrame([exportavel]).to_csv(index=False).encode("utf-8")
    st.download_button("üì• Baixar resultado (CSV)", csv_bytes, file_name="resultado_aq50.csv", use_container_width=True)

    st.write("**Importante:** percentis n√£o medem ‚Äúacerto‚Äù, mas posi√ß√£o relativa. Eles s√£o √∫teis para comparar seu resultado com um grupo normativo, como estudantes da mesma √°rea ou idade.")
    st.caption("Um percentil 99 significa que voc√™ est√° no 1\% mais alto.")            
    st.caption("Um percentil 50 indica um desempenho mediano, igual √† maioria.")
    st.caption("Um percentil 20 significa que 80\% das pessoas ficaram acima da sua pontua√ß√£o.")

    st.markdown("Conhe√ßa o meu trabalho no [instagram](https://www.instagram.com/clinicaguajara/)")
    st.write("Se houver d√∫vidas sobre a corre√ß√£o, me coloco √† disposi√ß√£o para esclarescer. Lembrando que esse resultado n√£o confere um diagn√≥stico de autismo, mas permite voc√™ comparar o seu resultado com outros cientistas autistas e n√£o autistas.")

    st.info("Baron-Cohen, S., Wheelwright, S., Skinner, R., Martin, J., & Clubley, E. (2001). The autism-spectrum quotient (AQ): Evidence from Asperger syndrome/high-functioning autism, males and females, scientists and mathematicians. Journal of Autism and Developmental Disorders, 31(1), 5‚Äì17. https://doi.org/10.1023/A:1005653411471")