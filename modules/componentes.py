# componentes.py

import streamlit as st
from typing import Dict, List
from services.supabase_storage import salvar_respostas_supabase

def render_questionario_neurociencia(blocos: Dict[str, List[str]], metadados_blocos: Dict[str, dict]) -> dict | None:
    """
    Renderiza um question√°rio neurocient√≠fico com tipos mistos (Likert, selectbox, campo aberto),
    com valida√ß√£o de campos obrigat√≥rios no bloco sociodemogr√°fico.
    """
    with st.form(key="form_questionario_neuro"):
        respostas_usuario = {}
        contador = 1
        campos_vazios = []

        with st.expander("üßæ TERMO DE CONSENTIMENTO LIVRE E ESCLARECIDO (TCLE)", expanded=False):
            st.markdown("""

            **Pesquisador Respons√°vel:** Pedro Henrique Ramos Pinto  
            **Institui√ß√£o:** Universidade Federal da Para√≠ba  
            **Contato:** (67) 99107-1045  

            **1. Apresenta√ß√£o da Pesquisa**  
            Voc√™ est√° sendo convidado(a) a participar desta pesquisa, que tem como objetivo investigar a rela√ß√£o entre caracter√≠sticas cognitivas e emocionais.  
            Para isso, voc√™ responder√° a question√°rios sobre suas experi√™ncias e caracter√≠sticas psicol√≥gicas.

            **2. Procedimentos**  
            A pesquisa consiste no preenchimento de uma s√©rie de question√°rios online, com dura√ß√£o estimada de 20 minutos.  
            As perguntas abordar√£o aspectos relacionados √† sua aten√ß√£o, emo√ß√µes e experi√™ncia cotidiana.  
            Sua participa√ß√£o √© volunt√°ria e voc√™ pode desistir a qualquer momento, sem necessidade de justificativa.

            **3. Riscos e Benef√≠cios**  
            Embora n√£o existam riscos f√≠sicos, alguns participantes podem sentir desconforto emocional ao refletir sobre quest√µes relacionadas √† ansiedade, depress√£o ou experi√™ncias pessoais.  
            Caso sinta necessidade, voc√™ pode interromper sua participa√ß√£o a qualquer momento.  
            Embora n√£o haja benef√≠cios diretos para voc√™, sua colabora√ß√£o ser√° essencial para avan√ßos no campo da neuroci√™ncia e psicologia.

            **4. Confidencialidade**  
            As informa√ß√µes coletadas ser√£o utilizadas exclusivamente para fins acad√™micos e cient√≠ficos.  
            Os dados ser√£o analisados de forma agregada, sem qualquer identifica√ß√£o pessoal.  
            No final do processo, o banco de dados dessa pesquisa ser√° publicado.  
            Entretanto, todas as medidas de seguran√ßa ser√£o adotadas para garantir sua privacidade e anonimato.
            """)


        for nome_bloco, itens in blocos.items():
            st.markdown(f"### {nome_bloco}")
            meta = metadados_blocos.get(nome_bloco, {})
            tipo_bloco = meta.get("tipo", "likert")
            escala = meta.get("escala", (1, 7))
            labels = meta.get("labels", ("", ""))
            tipos_personalizados = meta.get("tipos_personalizados", {})

            if tipo_bloco == "likert":
                st.markdown(f"<small>{labels[0]} | {labels[1]}</small>", unsafe_allow_html=True)

            for item in itens:
                chave = f"item_{contador}"

                if tipo_bloco == "sociodemografico":
                    tipo_item = tipos_personalizados.get(item)
                    if tipo_item == "numero":
                        resposta = st.number_input(item, min_value=0, max_value=120, step=1, key=chave)
                    elif isinstance(tipo_item, list) and tipo_item:
                        resposta = st.selectbox(item, options=tipo_item, key=chave, index=0)
                        if resposta == "":
                            campos_vazios.append(item)
                    else:
                        resposta = st.selectbox(item, options=["", "Sim", "N√£o"], key=chave)
                        if resposta == "":
                            campos_vazios.append(item)

                elif tipo_bloco == "likert":
                    resposta = st.slider(
                        label=f"{contador}. {item}",
                        min_value=escala[0],
                        max_value=escala[1],
                        value=(escala[0] + escala[1]) // 2,
                        format="%d",
                        key=chave,
                    )

                else:
                    resposta = st.text_input(label=item, key=chave)

                respostas_usuario[chave] = resposta
                contador += 1

        # ‚úÖ Confirma√ß√£o do Termo de Consentimento
        aceitou_termo = st.checkbox("Declaro que li e aceito o Termo de Consentimento Livre e Esclarecido.", key="aceite_tcle")

        enviado = st.form_submit_button("Enviar Respostas", use_container_width=True)
        
        if enviado:
            if campos_vazios:
                st.error("‚ö†Ô∏è Por favor, responda todas as perguntas do bloco sociodemogr√°fico antes de enviar.")
                return None

            if not aceitou_termo:
                st.error("‚ö†Ô∏è Voc√™ deve aceitar o Termo de Consentimento para prosseguir.")
                return None

            # ‚úÖ Tentativa de salvar no Supabase
            salvou = salvar_respostas_supabase(
                respostas_dict=respostas_usuario,
                aceitou_tcle=aceitou_termo,
            )

            if salvou:
                return {"respostas": respostas_usuario}
            else:
                st.error("‚ùå Ocorreu um erro ao salvar suas respostas. Por favor, tente novamente.")
                return None
    return None
